import { getElement } from "../utils.mjs"
import { createNamedFields } from "./fields.mjs"
import { createEl } from "../utils.mjs"
import { APIs, defaultAPI, matchAPIFromUrl } from "../api/index.mjs"
import { BookmarkHandler } from "./bookmark-handler.mjs"

export class APIHandler {
	/** 
	 * API handler in charge of building the API url
	 * @param {import("./explore-handler.mjs").ExploreHandler} explore 
	 */
	constructor(explore) {
		/** Explore parent handler */
		this.explore = explore
		
		/** Bookmark sub-handler */
		this.bookmark = new BookmarkHandler(this)

		/** Current API selected */
		this.currentAPI = defaultAPI

		/** API url "input" */
		this.urlEl = getElement("input[name=url]")

		/** API selection input */
		this.apiNameEl = getElement("select[name=apiName]", explore.formEl)
		this.apiNameEl.append(
			...Object.keys(APIs).map(
				// Set all APIs option
				(apiName) => new Option(apiName, apiName, null, apiName == this.currentAPI.name)
			)
		)
		this.apiNameEl.addEventListener("input", this.updateAPI.bind(this))

		/** API fields list */
		this.fieldsEl = getElement("[name=options] ul", explore.formEl)

		/** API add field button  */
		this.addFieldEl = getElement("button[name=add-option]")
		this.addFieldEl.addEventListener("click", this.addField.bind(this))

		// Update url on form data input
		this.explore.formEl.addEventListener("input", this.updateURL.bind(this))
		this.setCurrentAPIDefaults()
	}

	/** Set default values for current API */
	setCurrentAPIDefaults() {
		this.addField(this.currentAPI.defaultField)
		this.updateURL()
	}

	/** Build and update url */
	updateURL() {
		const url = this.currentAPI.buildURL(this.data.params)
		this.bookmark.updateToggleStatus(url)

		// Update URL field
		this.urlEl.value = url
		this.urlEl.scrollTo({ left: this.urlEl.scrollWidth })
	}

	/** Update API fields list */
	updFields() {
		this.addFieldEl.disabled = this.addFieldEl.childElementCount >= this.currentAPI.fields.length
	}

	/** Reset API fields list */
	resetFields() {
		this.fieldsEl.innerHTML = ""
	}

	/** Update current API */
	updateAPI() {
		const { apiName } = this.data
		if (this.currentAPI.name == apiName) return
		this.currentAPI = APIs[apiName]
		this.resetFields()
		this.setCurrentAPIDefaults()
	}

	/**
	 * Update current API and fields based on a url.
	 * @param {URL | string} url URL generated by this class
	 */
	updateFromURL(url) {
		url = new URL(url) // Make sure to have an URL

		// Update current API
		const api = matchAPIFromUrl(url)
		if (!api) throw new Error("URL doesn't match any API")
		this.currentAPI = api
		this.apiNameEl.value = this.currentAPI.name

		// Update fields
		this.resetFields()
		url.searchParams.forEach((v, k) => {
			if (api.entrypoint.searchParams.has(k)) return
			this.addField(k, v)
		})

		this.updateURL()
	}

	/**
	 * Add a new field of current API 
	 * @param {string?} name Default field name
	 * @param {string?} value Default field value
	 */
	addField(name, value) {
		const fieldRow = document.createElement("li")

		let { fieldInputEl, fieldNameEl } = createNamedFields({
			label: "Select API options",
			groupName: "params",
			fields: this.currentAPI.fields,
			name,
			value,
		})

		// Update url when field change
		fieldNameEl.addEventListener("change", () => this.updateURL(), true)

		// Delete button
		const optRemoveBtnEl = createEl("button", {
			type: "button",
			onclick: () => {
				fieldRow.remove()
				this.updFields()
				this.updateURL()
			},
		})

		fieldRow.append(fieldNameEl, optRemoveBtnEl, fieldInputEl)
		this.fieldsEl.appendChild(fieldRow)
		this.updFields()

		return fieldRow
	}

	/** Load satellites based on the current API and url */
	async loadSatellites() {
		return await this.currentAPI.search(this.data.url)
	}
	
	/**
     * Get grouped form data
	 * @type {{apiName: string, url: string, search: string, params: Record<string, *>}}
	 */
	get data() {
		const data = {}
		new FormData(this.explore.formEl).forEach((v, k) => {
			const keys = k.split(".")
			keys.reduce((acc, name, index) => {
				if (index === keys.length - 1) {
					acc[name] = v
				} else {
					acc[name] = acc[name] || {}
				}
				return acc[name]
			}, data)
		})
		return data
	}
}